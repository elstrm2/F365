from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config.settings import BOT_NAME
import logging

logger = logging.getLogger(BOT_NAME)


def profile_menu():
    buttons = [
        InlineKeyboardButton(text="‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="profile_support"),
        InlineKeyboardButton(text="üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="profile_promo_codes"),
        InlineKeyboardButton(
            text="üìù –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", callback_data="profile_directions_page"
        ),
        InlineKeyboardButton(text="‚≠ê –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="profile_subscription"),
    ]

    buttons.append(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))
    return InlineKeyboardMarkup(row_width=2).add(*buttons)


def subscription_menu(subscription_end: str) -> InlineKeyboardMarkup:
    buttons = []

    if subscription_end:
        subscription_end_datetime = datetime.fromisoformat(subscription_end)
        if subscription_end_datetime < datetime.now():
            buttons.append(
                InlineKeyboardButton(
                    text="üéØ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription"
                )
            )
    else:
        buttons.append(
            InlineKeyboardButton(
                text="üéØ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription"
            )
        )

    buttons.append(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="profile_back")
    )
    buttons.append(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))

    return InlineKeyboardMarkup(row_width=2).add(*buttons)


def create_profile_direction_menu_keyboard(direction_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup()

    keyboard.add(
        InlineKeyboardButton(
            text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            callback_data=f"profile_edit_direction_{direction_id}",
        )
    )

    keyboard.add(
        InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
            callback_data=f"profile_confirm_delete_direction_{direction_id}",
        )
    )

    keyboard.add(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="profile_directions_back"
        )
    )
    keyboard.add(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))

    return keyboard


def create_profile_job_directions_pagination_keyboard(
    directions, page, has_next, callback_prefix
):
    keyboard = InlineKeyboardMarkup()

    for direction in directions:
        item_text = f"üìù {direction['direction_name']}"
        keyboard.add(
            InlineKeyboardButton(
                item_text, callback_data=f"profile_add_direction_{direction['id']}"
            )
        )

    if has_next:
        keyboard.add(
            InlineKeyboardButton(
                "‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"{callback_prefix}_{page+1}"
            )
        )
    if page > 1:
        keyboard.add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{callback_prefix}_{page-1}")
        )

    keyboard.add(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="profile_directions_back"
        )
    )
    keyboard.add(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))
    return keyboard


def create_profile_user_directions_pagination_keyboard(
    directions, page, has_next, callback_prefix
):
    keyboard = InlineKeyboardMarkup()

    for user_direction in directions:
        item_text = f"üìù {user_direction['direction_name']}"
        keyboard.add(
            InlineKeyboardButton(
                item_text, callback_data=f"profile_directions_{user_direction['id']}"
            )
        )

    if has_next:
        keyboard.add(
            InlineKeyboardButton(
                "‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"{callback_prefix}_{page+1}"
            )
        )
    if page > 1:
        keyboard.add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{callback_prefix}_{page-1}")
        )

    keyboard.add(
        InlineKeyboardButton(
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data="profile_add_direction_page"
        )
    )

    keyboard.add(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="profile_back")
    )
    keyboard.add(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))
    return keyboard


def create_profile_edit_job_keywords_pagination_keyboard(
    keywords, page, selected_keywords, has_next, callback_prefix, direction_id
):
    keyboard = InlineKeyboardMarkup()
    logger.debug(f"Creating keyboard for page {page} with keywords: {keywords}")

    for keyword in keywords:
        item_text = f"üìå {keyword}" if keyword in selected_keywords else keyword
        callback_data = f"profile_edit_keyword_{keyword}"
        keyboard.add(InlineKeyboardButton(item_text, callback_data=callback_data))
        logger.debug(f"Added button: {item_text} with callback_data: {callback_data}")

    if has_next:
        keyboard.add(
            InlineKeyboardButton(
                "‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"{callback_prefix}_{page+1}"
            )
        )
    if page > 1:
        keyboard.add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{callback_prefix}_{page-1}")
        )

    keyboard.add(
        InlineKeyboardButton(
            text="üìã –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data=f"{callback_prefix}_select_all"
        ),
        InlineKeyboardButton(
            text="üßπ –°–Ω—è—Ç—å –≤—ã–±–æ—Ä –≤—Å–µ—Ö",
            callback_data=f"{callback_prefix}_cancel_all",
        ),
    )

    if selected_keywords:
        keyboard.add(
            InlineKeyboardButton(
                "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"{callback_prefix}_confirm"
            )
        )

    keyboard.add(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
            callback_data=f"profile_edit_direction_{direction_id}",
        )
    )
    keyboard.add(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))
    return keyboard


def create_profile_job_keywords_pagination_keyboard(
    keywords, page, selected_keywords, has_next, callback_prefix
):
    keyboard = InlineKeyboardMarkup()

    for keyword in keywords:
        item_text = f"üìå {keyword}" if keyword in selected_keywords else keyword
        keyboard.add(
            InlineKeyboardButton(
                item_text, callback_data=f"profile_add_keyword_{keyword}"
            )
        )

    if has_next:
        keyboard.add(
            InlineKeyboardButton(
                "‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"{callback_prefix}_{page+1}"
            )
        )
    if page > 1:
        keyboard.add(
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"{callback_prefix}_{page-1}")
        )

    keyboard.add(
        InlineKeyboardButton(
            text="üìã –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", callback_data=f"{callback_prefix}_select_all"
        ),
        InlineKeyboardButton(
            text="üßπ –°–Ω—è—Ç—å –≤—ã–±–æ—Ä –≤—Å–µ—Ö",
            callback_data=f"{callback_prefix}_cancel_all",
        ),
    )

    if selected_keywords:
        keyboard.add(
            InlineKeyboardButton(
                "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"{callback_prefix}_confirm"
            )
        )

    keyboard.add(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="profile_directions_back"
        )
    )
    keyboard.add(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))
    return keyboard


def create_profile_edit_direction_keyboard(direction_id: int) -> InlineKeyboardMarkup:
    keyboard = InlineKeyboardMarkup()

    keyboard.add(
        InlineKeyboardButton(
            text="üîë –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
            callback_data=f"profile_edit_direction_keywords_{direction_id}",
        )
    )

    keyboard.add(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data=f"profile_directions_{direction_id}"
        )
    )
    keyboard.add(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))

    return keyboard


def create_subscription_plans_menu(subscription_plans):
    keyboard = InlineKeyboardMarkup()

    for plan in subscription_plans:
        button_text = f"‚≠êÔ∏è {plan.price} —Ä—É–±. –∑–∞ {plan.duration.days} –¥–Ω–µ–π"
        callback_data = f"select_subscription_plan_{plan.id}"
        keyboard.add(
            InlineKeyboardButton(text=button_text, callback_data=callback_data)
        )

    keyboard.add(
        InlineKeyboardButton(
            text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="profile_subscription"
        )
    )
    keyboard.add(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))

    return keyboard


def create_payment_button(price, days):
    keyboard = InlineKeyboardMarkup()

    keyboard.add(
        InlineKeyboardButton(
            text="‚ú® –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã", url="https://google.com"
        )
    )
    keyboard.add(
        InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="buy_subscription")
    )
    keyboard.add(InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))

    return keyboard
